{{define "dbCodeTemplatePgx"}}

type {{.QueryStructName}}DBTX interface {
	Exec(context.Context, string, ...interface{}) (pgconn.CommandTag, error)
	Query(context.Context, string, ...interface{}) (pgx.Rows, error)
	QueryRow(context.Context, string, ...interface{}) pgx.Row
{{- if .UsesCopyFrom }}
	CopyFrom(ctx context.Context, tableName pgx.Identifier, columnNames []string, rowSrc pgx.CopyFromSource) (int64, error)
{{- end }}
{{- if .UsesBatch }}
	SendBatch(context.Context, *pgx.Batch) pgx.BatchResults
{{- end }}
}

{{ if .EmitMethodsWithDBArgument}}
func New{{.QueryStructName}}() *{{.QueryStructName}} {
	return &{{.QueryStructName}}{}
{{- else -}}
func New{{.QueryStructName}}(db {{.QueryStructName}}DBTX) *{{.QueryStructName}} {
	return &{{.QueryStructName}}{db: db}
{{- end}}
}

type {{.QueryStructName}} struct {
    {{if not .EmitMethodsWithDBArgument}}
	db {{.QueryStructName}}DBTX
    {{end}}
}

{{if not .EmitMethodsWithDBArgument}}
func (q *{{.QueryStructName}}) WithTx(tx pgx.Tx) *{{.QueryStructName}} {
	return &{{.QueryStructName}}{
		db: tx,
	}
}
{{end}}
{{end}}
